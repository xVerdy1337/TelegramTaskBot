import os
import asyncio

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
from modules import *


load_dotenv()
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()


async def main():
    global collection
    collection = await create_connection()
    await dp.start_polling(bot)


@dp.message(Command('start'))
async def start(message: types.Message):
    if await user_exists(collection, message.from_user.id):
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á!', reply_markup=main_keyboard)
        await add_user(collection, message.from_user.id)


@dp.message(F.text.lower() == 'üî∏—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
async def get_create_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
    await state.set_state(NewTaskState.GET_TEXT)


@dp.message(StateFilter(NewTaskState.GET_TEXT))
async def set_text_new_task(message: types.Message, state: FSMContext):
    await add_task(collection, message.from_user.id, message.text)
    await message.answer("–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!")
    await state.clear()


@dp.message(F.text.lower() == 'üî∏—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
async def list_tasks(message: types.Message):
    tasks = await get_tasks(collection, message.from_user.id)
    result = ''

    for index, task in enumerate(tasks):
        result += f"{index + 1}) {task["task_text"]} - "
        result += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ! \n" if task["task_status"] else f"‚ùé –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ \n"

    await message.answer(result)


@dp.message(F.text.lower() == 'üî∏–≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É')
async def status_task_get_id(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
    await state.set_state(StatusTaskState.GET_INDEX)


@dp.message(StateFilter(StatusTaskState.GET_INDEX))
async def set_task_status(message: types.Message, state: FSMContext):
    if await task_index_exists(collection, message.from_user.id, int(message.text) - 1):
        await message.answer(f"–ó–∞–¥–∞—á–∞ ‚Ññ{message.text} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        await complete_task(collection, message.from_user.id, int(message.text) - 1)
    else:
        await message.answer("–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    await state.clear()


@dp.message(F.text.lower() == 'üî∏—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
async def get_index_delete_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
    await state.set_state(DeleteTaskState.GET_INDEX)


@dp.message(StateFilter(DeleteTaskState.GET_INDEX))
async def task_delete(message: types.Message, state: FSMContext):
    if await task_index_exists(collection, message.from_user.id, int(message.text) - 1):
        await message.answer(f'–ó–∞–¥–∞—á–∞ ‚Ññ{message.text} —É–¥–∞–ª–µ–Ω–∞!')
        await delete_task(collection, message.from_user.id, int(message.text) - 1)
    else:
        await message.answer("–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    await state.clear()

if __name__ == '__main__':
    asyncio.run(main())
